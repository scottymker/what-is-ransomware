#!/usr/bin/env python3
"""Generate a quarterly ransomware resilience newsletter draft."""

from __future__ import annotations

import argparse
import datetime as _dt
import json
from pathlib import Path
from textwrap import dedent
from typing import Any, Dict, List


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--date",
        type=str,
        default=None,
        help="ISO date (YYYY-MM-DD) to anchor the quarter. Defaults to today.",
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=None,
        help="Optional path to write the Markdown email draft.",
    )
    parser.add_argument(
        "--metadata-output",
        type=Path,
        default=None,
        help="Optional path to write metadata (JSON).",
    )
    parser.add_argument(
        "--content",
        type=Path,
        default=Path("automation/newsletter_content.json"),
        help="Path to the curated content JSON file.",
    )
    parser.add_argument(
        "--seed-offset",
        type=int,
        default=0,
        help="Adjust which content items are selected for the quarter without editing data.",
    )
    return parser.parse_args()


def quarter_from_date(anchor: _dt.date) -> Dict[str, Any]:
    quarter_number = (anchor.month - 1) // 3 + 1
    quarter_label = f"{anchor.year} Q{quarter_number}"
    # Use 2024 as base to keep indexes small but deterministic.
    index = (anchor.year - 2024) * 4 + (quarter_number - 1)
    return {
        "quarter_number": quarter_number,
        "quarter_label": quarter_label,
        "index": index,
    }


def select_by_index(items: List[Dict[str, Any]], base_index: int) -> Dict[str, Any]:
    if not items:
        raise ValueError("Content list is empty; cannot build newsletter.")
    return items[base_index % len(items)]


def build_markdown(
    *,
    quarter_label: str,
    subject: str,
    preheader: str,
    intro_text: str,
    drill: Dict[str, Any],
    intel: Dict[str, Any],
    habit: Dict[str, Any],
    shareable: Dict[str, Any],
    resource: Dict[str, Any],
) -> str:
    step_lines = "\n".join(f"- {step}" for step in habit.get("steps", []))
    step_block = f"{step_lines}\n\n" if step_lines else ""

    body = f"""# What is Ransomware â€” Quarterly Briefing ({quarter_label})

**Subject:** {subject}
**Preheader:** {preheader}

Hello defenders,

{intro_text}

---

## 1. Featured Drill
**{drill['title']}**  
{drill['summary']}  
Access the scenario: {drill['link']}

## 2. Fresh Intelligence Signal
**{intel['headline']}**  
{intel['summary']}  
_Action:_ {intel['action']}  
_Source:_ {intel['source']}

## 3. Habit Builder
**{habit['title']}**  
{habit['summary']}

{step_block}## 4. Shareable Resource
**{shareable['title']}**  
{shareable['summary']}  
Share-ready link: {shareable['link']}

## 5. Spotlight Tool
**{resource['title']}**  
{resource['summary']}  
Download: {resource['link']}

---

_Workflow tip:_ Review, tweak, and drop this copy into your email platform. Buttondown, Mailchimp Free, and many newsletter tools accept Markdown or HTML paste-ins.

_Automation note:_ Generated by the What is Ransomware quarterly automation script. Update `automation/newsletter_content.json` to refresh the library at any time.
"""
    return dedent(body).strip() + "\n"


def main() -> None:
    args = parse_args()

    if args.date:
        anchor_date = _dt.date.fromisoformat(args.date)
    else:
        anchor_date = _dt.date.today()

    quarter = quarter_from_date(anchor_date)
    with args.content.open("r", encoding="utf-8") as fh:
        content = json.load(fh)

    base_index = quarter["index"] + args.seed_offset

    intro = select_by_index(content["intros"], base_index)
    drill = select_by_index(content["drills"], base_index)
    intel = select_by_index(content["intel_briefs"], base_index + 1)
    habit = select_by_index(content["habits"], base_index + 2)
    shareable = select_by_index(content["shareables"], base_index + 3)
    resource = select_by_index(content["resource_spotlights"], base_index + 4)

    subject = f"{quarter['quarter_label']} Ransomware Resilience Briefing"
    preheader = f"{drill['title']} + {habit['title']} keep your team ready"

    markdown = build_markdown(
        quarter_label=quarter["quarter_label"],
        subject=subject,
        preheader=preheader,
        intro_text=intro["text"],
        drill=drill,
        intel=intel,
        habit=habit,
        shareable=shareable,
        resource=resource,
    )

    if args.output:
        args.output.parent.mkdir(parents=True, exist_ok=True)
        args.output.write_text(markdown, encoding="utf-8")
    else:
        print(markdown)

    metadata = {
        "generated_at": _dt.datetime.now(tz=_dt.timezone.utc).isoformat(),
        "anchor_date": anchor_date.isoformat(),
        "quarter_label": quarter["quarter_label"],
        "subject": subject,
        "preheader": preheader,
        "content_ids": {
            "intro": intro["id"],
            "drill": drill["id"],
            "intel": intel["id"],
            "habit": habit["id"],
            "shareable": shareable["id"],
            "resource": resource["id"],
        },
    }

    if args.metadata_output:
        args.metadata_output.parent.mkdir(parents=True, exist_ok=True)
        args.metadata_output.write_text(json.dumps(metadata, indent=2) + "\n", encoding="utf-8")
    else:
        print(json.dumps(metadata, indent=2))


if __name__ == "__main__":
    main()
